name: CI

on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      CARGO_TARGET_DIR: target
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
          - '1.41.0'
        features:
          -
          - derive
          - hmac-sha1
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
        id: toolchain
      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: cargo-registry-test-${{ runner.os }}-${{ matrix.features }}-${{ hashFiles('Cargo.*') }}
          restore-keys: |
            cargo-registry-test-${{ runner.os }}-${{ matrix.features }}-
            cargo-registry-test-${{ runner.os }}-
      - name: Cache Cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: cargo-target-test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            cargo-target-test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-
            cargo-target-test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-
      - run: echo 'RUSTFLAGS=--allow unknown_lints' >> $GITHUB_ENV
        if: matrix.toolchain == '1.41.0'
      - name: Build `oauth1-request`
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --tests --manifest-path oauth1-request/Cargo.toml --features=${{ matrix.features }}
      - name: Build `examples`
        if: ${{ matrix.toolchain != '1.41.0' }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --manifest-path examples/Cargo.toml
      - name: Test `oauth1-request`
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path oauth1-request/Cargo.toml --features=${{ matrix.features }}
  derive-test:
    name: Test `oauth1-request-derive`
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
        id: toolchain
      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: cargo-registry-derive-test-${{ runner.os }}-${{ matrix.features }}-${{ hashFiles('Cargo.*') }}
          restore-keys: |
            cargo-registry-derive-test-${{ runner.os }}-${{ matrix.features }}-
            cargo-registry-derive-test-${{ runner.os }}-
      - name: Cache Cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: cargo-target-derive-test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            cargo-target-derive-test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-
            cargo-target-derive-test-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-
      - name: Build `oauth1-request-derive`
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --tests --manifest-path oauth1-request-derive/Cargo.toml
      - name: Build `test-deps`
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --manifest-path oauth1-request-derive/test-deps/Cargo.toml --target-dir oauth1-request-derive/test-deps/target
      - name: Test `oauth1-request-derive`
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --manifest-path oauth1-request-derive/Cargo.toml
  credentials-msrv:
    name: Build `oauth-credentials` on MSRV
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - '1.0.0'
          - '1.6.0'
          - '1.8.0'
          - '1.13.0'
          - '1.36.0'
        include:
          - toolchain: '1.0.0'
            features: std
            # Toolchains older than 1.8.0 cannot compile `oauth-credentials` directly
            # because the toolchains do not understand Cargo registry's information for `serde`
            # (see <https://github.com/rust-lang/cargo/issues/3763>).
            # So, with these toolchains, we compile a crate named `oauth-credentials-test` instead,
            # which depends on `oauth-credentials` without `serde` feature.
            crate_suffix: '-test'
          - toolchain: '1.6.0'
            crate_suffix: '-test'
          - toolchain: '1.13.0'
            features: serde
          - toolchain: '1.36.0'
            features: alloc
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
        id: toolchain
      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: cargo-registry-credentials-msrv-${{ runner.os }}-${{ matrix.features }}-${{ hashFiles('Cargo.*') }}
          restore-keys: |
            cargo-registry-credentials-msrv-${{ runner.os }}-${{ matrix.features }}-
            cargo-registry-credentials-msrv-${{ runner.os }}-
      - name: Cache Cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.*') }}
            cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-
            cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-
      - uses: actions/checkout@v2
        with:
          repository: rust-lang/crates.io-index
          ref: 46a429eac9f70fd7281922780d7dd42e2fb7ab77
          path: crates.io-index
      - run: |
          # Remove the virtual manifest because Rust 1.13.0 run fails when built as a workspace member.
          rm Cargo.toml
          # Reference: <https://github.com/mcgoo/vcpkg-rs/blob/f75707b/.github/workflows/rust-1.12.yml>
          mkdir -p oauth-credentials/.cargo
          cat <<EOF >> oauth-credentials/.cargo/config
          [source.crates-io]
          registry = "file://$GITHUB_WORKSPACE/crates.io-index"
          EOF
      - name: Build `oauth-credentials`
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --manifest-path oauth-credentials${{ matrix.crate_suffix }}/Cargo.toml --no-default-features --features=${{ matrix.features }}
  credentials-test:
    name: Test `oauth-credentials`
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: --allow unknown_lints
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - beta
          - nightly
        features:
          - serde
          - std
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          override: true
        id: toolchain
      - name: Cache Cargo registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: cargo-registry-credentials-test-${{ runner.os }}-${{ matrix.features }}-${{ hashFiles('Cargo.*') }}
          restore-keys: |
            cargo-registry-credentials-test-${{ runner.os }}-${{ matrix.features }}-
            cargo-registry-credentials-test-${{ runner.os }}-
      - name: Cache Cargo build
        uses: actions/cache@v2
        with:
          path: target
          key: cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.*') }}
          restore-keys: |
            cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.*') }}
            cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ matrix.features }}-
            cargo-target-credentials-${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-
      - name: Build `oauth-credentials`
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose --manifest-path oauth-credentials/Cargo.toml --features=${{ matrix.features }}
      - name: Test `oauth-credentials`
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --manifest-path oauth-credentials/Cargo.toml --features=${{ matrix.features }}
